% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ECGraph.R
\docType{class}
\name{ECGraph}
\alias{ECGraph}
\alias{ECGraph-class}
\title{ECGraph S4 Class and Constructor}
\arguments{
\item{edges_input}{A character string specifying the path to a file,
a data frame with two columns representing edges, or an \code{igraph} graph object.
Vertex IDs will be coerced to character.}

\item{col1}{The name or index of the first column if `edges_input` is a
data frame or file. Defaults to 1.}

\item{col2}{The name or index of the second column if `edges_input` is a
data frame or file. Defaults to 2.}

\item{header}{A logical value for reading from a file. Defaults to TRUE.}

\item{sep}{The field separator character for reading from a file. Defaults to "\t".}
}
\value{
An object of class ECGraph.
}
\description{
Represents an undirected graph and provides a constructor to create it.
The ECGraph object stores the graph's adjacency list, vertex degrees, and names.
The constructor accepts a file path, a data frame, or an igraph object.
}
\section{Slots}{

\describe{
\item{\code{adj}}{list. An adjacency list where names are vertex IDs and values are
character vectors of neighboring vertex IDs.}

\item{\code{degrees}}{list. A named list where names are vertex IDs and values are
the integer degrees of vertices.}

\item{\code{names}}{character. A character vector of all unique vertex names in the graph.}
}}

\examples{
# --- Data ---
edge_df <- data.frame(
  vertex1 = c("A", "A", "B", "C", "E"), # E is an isolated vertex
  vertex2 = c("B", "C", "C", "D", "E"), # E is connected only to itself (self-loop)
  stringsAsFactors = FALSE
)
temp_file <- tempfile(fileext = ".tsv")
write.table(edge_df, temp_file, sep = "\t", row.names = FALSE, quote = FALSE)

# --- ECGraph from a data frame ---
graph_from_df <- ECGraph(edge_df)
print("Adjacency list from data frame:")
print(graph_from_df@adj)

# --- ECGraph from a file path ---
graph_from_file <- ECGraph(temp_file)

# --- ECGraph from an igraph object ---
if (requireNamespace("igraph", quietly = TRUE)) {
  ig <- igraph::graph_from_data_frame(edge_df, directed = FALSE)
  graph_from_ig <- ECGraph(ig)
}

unlink(temp_file)

}
\seealso{
Functions that operate on ECGraph objects:
\itemize{
  \item \code{\link{to_dataframe}}: Convert an ECGraph to a data frame edge list.
  \item \code{\link{get_neighbors}}: Retrieve all neighbors for a set of vertices.
  \item \code{\link{get_edge_count_in}}: Count edges within a set of vertices.
  \item \code{\link{get_edge_count_between}}: Count edges between two sets of vertices.
  \item \code{\link{get_edge_count_in_max}}: Maximum possible edge count within a set (complete graph).
  \item \code{\link{get_edge_count_between_max}}: Maximum possible edge count between two sets (complete graph).
  \item \code{\link{get_edge_count_in_max_fds}}: Maximum possible edge count within a set (fixed degree sequence).
  \item \code{\link{get_edge_count_between_max_fds}}: Maximum possible edge count between two sets (fixed degree sequence).
}
}
